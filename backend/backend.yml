name: FoodieFind
description: A food ordering and restaurant discovery application.

entities:
  User:
    authenticable: true
    properties:
      - name
      - { name: email, type: email }
      - { name: role, type: choice, options: { values: [customer, owner, admin], default: customer } }
    policies:
      create:
        - access: admin
      read:
        - { access: restricted, allow: User, condition: self }
        - access: admin
      update:
        - { access: restricted, allow: User, condition: self }
      delete:
        - access: admin
      signup:
        - access: public

  Restaurant:
    properties:
      - { name: title, type: string }
      - { name: description, type: text }
      - { name: address, type: string }
      - { name: phone, type: string }
      - { name: heroImage, type: image, options: { sizes: { thumbnail: { width: 400, height: 300 } } } }
    belongsTo:
      - { name: owner, entity: User }
    policies:
      create:
        - { access: restricted, allow: User }
      read:
        - access: public
      update:
        - { access: restricted, allow: User, condition: self }
        - access: admin
      delete:
        - { access: restricted, allow: User, condition: self }
        - access: admin

  MenuItem:
    properties:
      - { name: title, type: string }
      - { name: description, type: text }
      - { name: price, type: money, options: { currency: 'USD' } }
      - { name: category, type: string }
      - { name: itemImage, type: image, options: { sizes: { thumbnail: { width: 200, height: 200 } } } }
    belongsTo:
      - { name: restaurant, entity: Restaurant }
      - { name: owner, entity: User } # For self condition
    policies:
      create:
        - { access: restricted, allow: User }
      read:
        - access: public
      update:
        - { access: restricted, allow: User, condition: self }
      delete:
        - { access: restricted, allow: User, condition: self }

  Order:
    properties:
      - { name: totalPrice, type: money, options: { currency: 'USD' } }
      - { name: status, type: choice, options: { values: [pending, confirmed, preparing, delivered, cancelled], default: pending } }
      - { name: specialInstructions, type: text }
    belongsTo:
      - { name: customer, entity: User }
      - { name: restaurant, entity: Restaurant }
    belongsToMany:
      - { name: items, entity: MenuItem }
    policies:
      create:
        - { access: restricted, allow: User }
      read:
        - { access: restricted, allow: User, condition: self }
      update:
        - { access: restricted, allow: User, condition: self }
      delete:
        - { access: restricted, allow: User, condition: self }


# Health check endpoint for connection testing
endpoints:
  healthCheck:
    path: /api/health
    method: GET
    handler: healthCheck
    policies: []  # Public access for health checks